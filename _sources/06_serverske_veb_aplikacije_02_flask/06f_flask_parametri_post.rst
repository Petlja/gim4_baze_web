Метода POST
***********

Метода **POST** подразумева да се подаци прослеђују у склопу захтева,
али да нису видљиви као део URL-а. На тај начин је могуће проследити
много више података и они се не виде јавно, што је у неким случајевима
значајна предност у односу на метод GET. Ако је могуће користити и
методу GET и методу POST (ако тајност података није значајан фактор),
препоручује се да се метода GET користи за слање података скриптовима
који не остављају трајне промене на серверу, док се у супротном
препоручује употреба методе POST (тада се GET обично користи код
скриптова који читају и приказују прочитане податке из базе, док се
метод POST обично користи код скриптова који уписују податке у базу).

За разлику од методе GET која се користи и у комбинацији са
формуларима, али и у комбинацији са обичним везама (јер је могуће
једноставно креирати обичну везу којом се шаље GET захтев и прослеђују
се параметри), метода POST се најчешће користи само у комбинацији са
формуларима. У том случају је обавезно формулару навести атрибут
``method="POST"``. На пример,

.. code-block:: html

   <form method="POST">
     ...
   </form>

Када захтев стигне на сервер, Flask апликација која одговара на
захтеве зна да ли је у питању GET или POST захтев (променљива
``request.method`` одређује која је метода
употребљена). Подразумевано, Flask апликације одговарају само на GET
захтеве. Заправо, приликом регистровања путања анотацијом
``@app.route(...)`` анотирана функција се повезује само са GET
захтевима ка тој путањи. Ако желимо да нека страница тј. функција
одговара и на POST захтеве, онда је потребно да приликом регистрације
путање наведемо и метод POST. На пример, наредним кôдом се постиже да
се функција ``login`` позива када се проследи HTTP POST захтев на
путању ``/login`` (на пример, на адресу ``http://127.0.0.1/login``).

.. code-block:: py

   @app.route("/login", methods=["POST"])
   def login():
       ...

Могуће је подесити и да се на некој путањи прихватају и GET и POST
захтеви. На пример, наредним кодом се постиже да се функција ``index``
позива када год се проследи било GET, било POST захтев за кореном
страницом:

.. code-block:: py

   @app.route("/", methods=["GET", "POST"])
   def index():
       ...

Код оваквих функција је често потребно проверити о којој се врсти
захтева ради (да ли је пристигли захтев GET или POST), што је могуће
урадити испитивањем вредности ``request.method``. На пример,

.. code-block:: py

   @app.route("/login", methods=["GET", "POST"])
   def logovanje():
       if request.method == "POST":
          return uloguj_korisnika()
       else:
          return prikazi_formular_za_logovanje()

Подаци који стижу у склопу POST захтева су такође задати у облику
речника који кључеве пресликава у вредности. Том речнику се из Flask
скрипта може приступити помоћу ``request.form``.
