Серверске веб-апликације
========================

Веб је од самог свог зачетка заснован на моделу
**клијент-сервер**. Клијент (то је најчешће веб-прегледач било на
рачунару, било на неком мобилном уређају) се обраћа веб-серверу са
захтевом за одређеним ресурсима: веб-страницама, сликама, звучним и
видео-записима, документима, датотекама и слично. Сервер одговара на
захтев клијента и, ако је све у реду, шаље клијенту тражени ресурс.

На почетку развоја веба, веб-странице је углавном чинио само унапред
припремљен садржај који су корисници могли само да прегледају и
евентуално прате везе ка другим страницама. Такве странице се називају
**статичке веб-странице** и оне не омогућавају никакву нарочиту
интеракцију са корисницима. Сваки корисник приликом приступа таквој
веб-страници види потпуно исту страницу, може само да чита њен садржај
и након тога да пређе на неку другу страницу (најчешће праћењем неког
линка унутар странице). У овом случају, и клијент и сервер имају веома
једноставне улоге: клијент шаље захтев серверу, сервер проналази
статичку страницу у свом систему датотека и враћа је клијенту без
икакве обраде. На крају клијент приказује добијену страницу и ту се
сва интеракција извршава, све до наредног захтева.

Веб је напредовао за кратко време, па се појавила потреба за
напреднијим обликом интеракције са корисницима, за шта је било
потребно основне веб-технологије (језике за обележавање HTML и CSS)
допунити напреднијим програмским језицима који се користе за
програмирање овакве интеракције. У зависности од тога да ли се
програми извршавају на клијентском или серверском рачунару,
разликујемо клијентске и серверске веб-технологије.

Прошле године смо се упознали са језиком **JavaScript** који је
омогућио да се са сервера на клијент поред статичног садржаја
форматираног помоћу језика HTML и CSS достави и текст програма
(тзв. скрипта) у језику JavaScript који се затим извршава унутар
прегледача. Пошто се такви скриптови извршавају на клијенту, они се
називају **клијентски скриптови**. Странице које садрже JavaScript
називају се некада и **(интер)активне странице**. Програми у језику
JavaScript су најчешће вођени догађајима, тј. JavaScript нам најчешће
служи да дефинишемо измене на страници које се дешавају као реакције
на акције корисника (нпр. када корисник у апликацији за претрагу
летовања мишем кликне на поље за унос датума, онда се на страници
прикаже календар из којега онда бира датум). Видећемо у наставку да се
JavaScript данас често користи и да се као реакција на неку акцију
корисника затраже неки подаци са сервера и да се, када стигну са
севера, прикажу у склопу тренутно отворене веб-стране.


Данас вебом доминирају **динамичке веб-странице** чији се садржај или
део садржаја креира аутоматски, као резултат рада одређених програма
(кажемо скриптова). Ти скриптови се покрећу на серверу (зато се
називају **серверски скриптови**), обично читају неке податке из базе
података (која се такође налази на неком серверу на вебу) и на основу
прочитаних података формирају веб-страницу која се онда шаље клијенту
који је приказује. Дакле, у случају клијентских скриптова сервер
клијенту шаље страницу која садржи програмски кôд скрипта (у језику
JavaScript) који се онда извршава на клијенту, док се у случају
серверских скриптова, ти скиптови (написани на језицима какви су
Python, PHP, ASP.Net итд.) изврше на серверу и на клијент се шаље
резултат њиховог извршавања (скрипт никада не стигне до клијента и
клијент нема увид у његов кôд). Наравно, динамички генерисане
веб-странице могу у себи да садрже и неке клијентске скриптове и на
данашњем вебу се обично креирају веб-апликације које комбинују и
серверске и клијентске скриптове.

Традиционални модел веба је заснован на протоколу који се назива HTTP
и који подразумева да сервер и клијент комуницирају једино тако што
клијент шаље серверу захтев за потпуно новом веб страницом, која се
када стигне приказује у прегледачу веба, уместо странице која је
претходно била приказана. Међутим, с временом се развио друачији
механизам који подразумева да клијент и сервер комуницирају и док је
једна веб-страница отворена, размењујући одређене податке. На пример,
претраживачи често нуде опцију аутоматског предлагања упита
(енгл. autocomplete). Када корисник унесе неколико почетних карактера
у поље за претрагу, сервер клијенту шаље неколико најчешћих упита који
почињу тим карактерима и ти упити се уписују у падајућу листу из које
се могу одабрати. Када нов мејл стигне док је отворена нека веб-мејл
апликација, он се приказује у списку свих мејлова. Дакле, док је
страница отворена, oбично након неких акција корисника (уноса текста у
поље за унос текста, акција мишем и слично) или у правилним временским
интервалима (на пример, на сваких неколико секунди), клијент шаље
серверу захтев за одређеним подацима (не целом новом
веб-страном). Реакција на акције корисника и слање таквог захтева и
прихват одговора се врше из клијентског скрипта (из језика
JavaScript). Када одговор стигне, онда се (поново помоћу језика
JavaScript) он интегрише у тренутно отворену веб-страну (без њене
замене другом веб-страном). Оqвај начин рада се назива **Ajax**
(*Asynchronous JavaScript and XML*). Разлог је то што су некада подаци
са сервера ка клијенту стизали у формату *XML*, док се данас јако
често користи формат *JSON* (*JavaScript Object Notation*). Овај начин
рада смањује активности сервера, а повећава активности клијента, што у
доба веома моћних клијентских дигиталних уређаја (чак и мобилних)
смањује трошкове рада сервера са пуно корисника. Ajax клијентима
доноси осећај бржег и одзивнијег рада (јер се избегава учитавање и
приказ страница из почетка приликом сваке промене дела садржаја). С
временом се развио чак и концепт **једностраничних апликација**
(енгл. *single page application*), где целокупна веб-апликација има
једну једину страницу чији се садржај мења помоћу Ajax-а. Пошто Ajax
подразумева и веома сложено програмирање клијентских скриптова (у
језику JavaScript), развијене су многе библиотеке и радни оквири који
су намењени за то (данас су веома популарни **Angular2** компаније
Google и **React.js** компаније Facebook).
