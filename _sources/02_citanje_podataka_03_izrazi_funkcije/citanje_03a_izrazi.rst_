.. -*- mode: rst -*-

Изрази
======

Након ``SELECT`` се најчешће наводе само називи колона, међутим,
могуће је употребити и сложеније изразе који у себи укључују и
вредности прочитане из одговарајућих колона. Тиме заправо
**пресликавамо** вредности прочитане из колона табела применом
одговарајућих функција. Илуструјмо ово кроз неколико примера.

.. questionnote::
           
   Приказати годишњи фонд часова за сваки предмет (претпоставља се да
   школска година има 37 радних недеља).

.. code-block:: sql
                
   SELECT naziv, razred, 37 * fond
   FROM predmet;

Уместо назива колоне ``fond`` наведен је израз ``37 * fond`` који
подразумева да се вредност прочитана из колоне фонд помножи са 37.
   
Приметимо да колона са годишњим фондом нема неко илустративно име. То
можемо променити коришћењем тзв. **алијаса** тако што ћемо колони
променити име коришћењем кључне речи ``AS``.
   
.. code-block:: sql
                
   SELECT naziv, razred, 37 * fond AS godisnji_fond
   FROM predmet;

Ниске се могу надовезати оператором ``||``.
   
.. questionnote::

   Направити јединствену колону која садржи пуно име и презиме сваког
   ученика.
           
.. code-block:: sql
                
   SELECT id, ime || ' ' || prezime AS ime_i_prezime
   FROM ucenik

Напоменимо да се у неким другим системима за управљање базама података
за надовезивање ниски користи функција ``CONCAT``.


.. questionnote::

   Направити преглед регулисаних и нерегулисаних изостанака, тако што
   се уз идентификатор сваког изостанка прикаже да ли је нерегулисан
   или регулисан (било да је оправдан или неоправдан).

Задатак ћемо решити употребом гранања. Основни облик гранања у језику
SQL је израз ``CASE``. Његова основна синтакса је облика:

.. code-block::

   CASE
      WHEN uslov1 THEN vrednost1
      WHEN uslov2 THEN vrednost2
      ...
      WHEN uslovk THEN vrednostk
      ELSE vrednost
   END

Врши се провера испуњености једног по једног услова и ако је неки од
њих испуњен, вредност израза ``CASE`` је вредност која је придружена
том услову. У супротном је вредност израза ``CASE`` једнака вредности
која је наведена уз ``ELSE``. У нашем примеру, гранање можемо постићи
на следећи начин:

.. code-block:: sql

   SELECT id, CASE
                 WHEN status = 'нерегулисан' THEN 'нерегулисан'
                 ELSE 'регулисан'
              END AS status
   FROM izostanak;

Неки системи за управљање базама података подржавају и функцију облика
``IF(uslov, vrednost_tacno, vrednost_netacno)``. Вредност таквог
израза једнака је вредности ``vrednost_tacno`` ако je услов испуњен
тј. вредности ``vrednost_netacno`` ако услов није испуњен. У Sqlite
ова функција се назива ``IIF``, али пошто постоји само у неким новијим
верзијама, нећемо је користити.

Илуструјмо употребу ``CASE`` израза још једним примером.

.. questionnote::

   Уз сваку оцену из табеле оцена приказати и њен текстуални опис
   (недовољан, довољан, добар, врлодобар, одличан).

.. code-block:: sql

   SELECT id, ocena, CASE 
                       WHEN ocena = 1 THEN 'недовољан'
                       WHEN ocena = 2 THEN 'довољан'
                       WHEN ocena = 3 THEN 'добар'
                       WHEN ocena = 4 THEN 'врлодобар'
                       WHEN ocena = 5 THEN 'одличан'
                     END AS opis_ocene
   FROM ocena;

